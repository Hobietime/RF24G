<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_r_f24_g__receive_8cpp-example">
    <title>RF24G_Receive.cpp</title>

<para>This is an example on how to receive using the <link linkend="class_r_f24___g">RF24_G</link> class <literallayout><computeroutput>
<emphasis class="comment">/*&#32;This&#32;is&#32;a&#32;small&#32;sketch&#32;that&#32;listens&#32;</emphasis>
<emphasis class="comment">&#32;*&#32;for&#32;packets&#32;and&#32;forwards&#32;them&#32;back&#32;to&#32;the&#32;sender.</emphasis>
<emphasis class="comment">&#32;*/</emphasis>

<emphasis class="preprocessor">#include&#32;&lt;<link linkend="_r_f24_g_8h">RF24G.h</link>&gt;</emphasis>
<emphasis class="comment">//&#32;we&#32;must&#32;instantiate&#32;the&#32;RF24_G&#32;object&#32;outside&#32;of&#32;the&#32;setup&#32;function&#32;so&#32;it&#32;is&#32;available&#32;in&#32;the&#32;loop&#32;function</emphasis>
<link linkend="class_r_f24___g">RF24_G</link>&#32;test;
<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;
<emphasis class="keywordtype">void</emphasis>&#32;setup()&#32;{
&#32;&#32;&#32;&#32;Serial.begin(9600);
&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;create&#32;the&#32;RF24G&#32;object&#32;with&#32;an&#32;address&#32;of&#32;1,&#32;using&#32;pins&#32;7&#32;and&#32;8</emphasis>
&#32;&#32;&#32;&#32;test&#32;=&#32;<link linkend="class_r_f24___g">RF24_G</link>(1,&#32;7,&#32;8);
&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;print&#32;out&#32;the&#32;details&#32;of&#32;the&#32;radio&apos;s&#32;configuration&#32;(useful&#32;for&#32;debug)</emphasis>
&#32;&#32;&#32;&#32;test.radio.printDetails();
}

<emphasis class="keywordtype">void</emphasis>&#32;loop()&#32;{
&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;declare&#32;packet&#32;variable</emphasis>
&#32;&#32;&#32;&#32;<link linkend="classpacket">packet</link>&#32;receiver;
&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;declare&#32;string&#32;to&#32;place&#32;the&#32;packet&#32;payload&#32;in</emphasis>
&#32;&#32;&#32;&#32;<emphasis class="keywordtype">char</emphasis>&#32;payload[30]
&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;check&#32;if&#32;the&#32;radio&#32;has&#32;any&#32;packets&#32;in&#32;the&#32;receive&#32;queue</emphasis>
&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(test.<link linkend="class_r_f24___g_1a7298349aea33bf12acdf242b7527302b">available</link>()&#32;==&#32;<emphasis class="keyword">true</emphasis>)&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(<emphasis class="stringliteral">&quot;packet&#32;received!&quot;</emphasis>)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;read&#32;the&#32;data&#32;into&#32;the&#32;packet&#32;</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;test.<link linkend="class_r_f24___g_1a00d022e73f823087f1b2185545afbaa4">read</link>(&amp;receiver);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;print&#32;the&#32;packet&#32;number&#32;of&#32;the&#32;received&#32;packet</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;if&#32;these&#32;are&#32;not&#32;consecutive&#32;packets&#32;are&#32;being&#32;lost&#32;due&#32;to&#32;timeouts.</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(<emphasis class="stringliteral">&quot;count:&#32;&quot;</emphasis>)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(receiver.<link linkend="classpacket_1a232661ed34d4278ab9bc81593a1aac64">getCnt</link>());
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;print&#32;the&#32;source&#32;address&#32;of&#32;the&#32;received&#32;packet</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(<emphasis class="stringliteral">&quot;address:&#32;&quot;</emphasis>)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(receiver.getaddress());
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;load&#32;the&#32;payload&#32;into&#32;the&#32;payload&#32;string</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;receiver.<link linkend="classpacket_1a6d50c91a97477e0de8ff0d3a23341f73">readPayload</link>(payload,&#32;30)&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;print&#32;the&#32;payload&#32;</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(<emphasis class="stringliteral">&quot;payload:&#32;&quot;</emphasis>)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(payload);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;since&#32;the&#32;address&#32;in&#32;the&#32;packet&#32;object&#32;is&#32;already</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;set&#32;to&#32;the&#32;address&#32;of&#32;the&#32;receiver,&#32;it&#32;doesn&apos;t&#32;need&#32;to&#32;be&#32;changed</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;hence,&#32;we&#32;can&#32;write&#32;the&#32;packet&#32;back&#32;to&#32;the&#32;receiver</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;we&#32;may&#32;check&#32;to&#32;see&#32;if&#32;the&#32;transmission&#32;failed,&#32;if&#32;so&#32;we&#32;just&#32;drop&#32;the&#32;packet</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(test.<link linkend="class_r_f24___g_1ac10bdf625f27df73183788a6358d2e71">write</link>(receiver)&#32;==&#32;<emphasis class="keyword">false</emphasis>)&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(<emphasis class="stringliteral">&quot;transmit&#32;back&#32;failed!&quot;</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(<emphasis class="stringliteral">&quot;dropping&#32;packet...&quot;</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;}
}
</computeroutput></literallayout> </para>

</section>
